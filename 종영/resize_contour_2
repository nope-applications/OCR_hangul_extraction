import cv2
import numpy as np
import time
import math

# 검은색 이미지 개수 -
# gray 범위는 0~255인데 이 범위를 몇개로 나눌것인지
image_num = 16


# 컨투어 찾기
def findContour(image):
    # 글자의 외각만 찾기, 좌표들은 contours에 들어있음
    contours, hierarchy = cv2.findContours(image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # 컨투어 반환
    return contours, hierarchy


# 종(0)켈레톤
def skeletonize(img):
    start_time = time.time()

    # ret, img = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY_INV)
    # img = cv2.resize(img, dsize=(1240, 1024), interpolation=cv2.INTER_LINEAR)
    img = cv2.resize(img, dsize=(0, 0),fx=0.7,fy=0.7 ,interpolation=cv2.INTER_LINEAR)
    #
    th, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)

    cv2.imshow("2222",img)



    # kernel = np.ones((1, 3), np.uint8)
    # v = cv2.erode(img, kernel, iterations=1)
    # cv2.imshow("v_d",v)
    kernel = np.ones((1, 3), np.uint8)
    h= cv2.erode(img, kernel, iterations=1)
    cv2.imshow("h",h)
    kernel = np.ones((10, 1), np.uint8)
    result = cv2.morphologyEx(h, cv2.MORPH_CLOSE, kernel, iterations=2)
    kernel = np.ones((1, 10), np.uint8)
    result = cv2.morphologyEx(result, cv2.MORPH_CLOSE, kernel,iterations=2)
    cv2.imshow("h_next",result)
    kernel=np.ones((1,3),np.uint8)
    result= cv2.erode(result, kernel, iterations=1)
    kernel = np.ones((3, 1), np.uint8)
    result = cv2.erode(result, kernel, iterations=1)

    cv2.imshow("result",result)

    # kernel = np.ones((1, 3), np.uint8)
    # img = cv2.dilate(img, kernel, iterations=2)
    # cv2.imshow("v_a",img)

    # kernel = np.ones((3, 1), np.uint8)
    # img = cv2.dilate(img, kernel, iterations=2)
    # cv2.imshow("h_a", img)
    #
    # kernel = np.ones((3, 1), np.uint8)
    # img = cv2.erode(img, kernel, iterations=1)


    # kernel = np.ones((1, 5), np.uint8)
    # img = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

    return result





# 색의 개수 만큼 검은색 이미지를 만든다.
def createBlackImage(image):
    start_time = time.time()

    print('검은색 이미지 ' + str(image_num) + '개 만들기 시작')

    draw_image_list = []

    for i in range(0, image_num):
        black_image = np.zeros_like(image)
        draw_image_list.append(black_image)

    print('검은색 이미지 만들기 끝 : ', time.time() - start_time, '\n')

    return draw_image_list


# 검은색 이미지위에 뽑아낸 색 그리기
def blackImageDraw(x_y_line_image, black_image_list):
    start_time = time.time()
    print('검은색 이미지 위에 색 그리기 시작')
    devide_range = math.ceil(255 / image_num)
    for index, image in enumerate(black_image_list):
        if index==15:
            pts = np.where(
                (x_y_line_image >= (devide_range * (index))) & (x_y_line_image < (devide_range * (index + 1))))
            # print(devide_range * index, devide_range * (index + 1))
            black_image_list[index][pts[0], pts[1]] = 255
            # cv2.imshow('basic' + str(index), black_image_list[index])

            # 가로로 늘리기
            # kernel = np.ones((3,8), np.uint8)
            # black_image_list[index] = cv2.morphologyEx(black_image_list[index], cv2.MORPH_CLOSE, kernel, iterations=1)

            # 침식
            kernel = np.ones((2, 2), np.uint8)
            black_image_list[index] = cv2.erode(black_image_list[index], kernel, iterations=1)

            # cv2.imshow('black' + str(index), black_image_list[index])
            # cv2.waitKey(0)
    print('검은색 이미지 위에 색 그리기 끝 : ', time.time() - start_time, '\n')

    return black_image_list

def xLineYLineAdd(img):
    # 가로선 추출
    x_line_image = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=1)
    x_line_image = np.absolute(x_line_image)
    x_line_image = np.uint8(x_line_image)
    # cv2.imshow('x_line_image', x_line_image)

    # 세로선 추출
    y_line_image = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=1)
    y_line_image = np.absolute(y_line_image)
    y_line_image = np.uint8(y_line_image)
    # cv2.imshow('y_line_image', y_line_image)

    # 가로 세로 합친 이미지 보여주기
    bgr_x_line_add_y_line_image = cv2.bitwise_or(x_line_image, y_line_image)
    # cv2.imshow('bgr_x_line_add_y_line_image', bgr_x_line_add_y_line_image)

    return bgr_x_line_add_y_line_image

# 시간체크 시작
start_time = time.time()
for i in range(47, 111):
    # 이미지 경로
    image_path = '../image/'+str(i)+'.png'

    # bgr 이미지 불러오기
    bgr_image = cv2.imread(image_path)
    resize_imge=cv2.imread(image_path)
    # resize_imge = cv2.resize(resize_imge, dsize=(1240, 1024), interpolation=cv2.INTER_LINEAR)
    resize_imge = cv2.resize(resize_imge, dsize=(0, 0),fx=0.7,fy=0.7 ,interpolation=cv2.INTER_LINEAR)

    # resize_imge = cv2.resize(bgr_image, dsize=(0, 0),fx=1.5,fy=1.5 , interpolation=cv2.INTER_LINEAR)
    gray_image=cv2.cvtColor(bgr_image,cv2.COLOR_BGR2GRAY)
    bgr_x_line_add_y_line_image = xLineYLineAdd(gray_image)
    # cv2.imshow("aaaa",bgr_x_line_add_y_line_image)
    skel=skeletonize(bgr_x_line_add_y_line_image)
    c,h=findContour(skel)
    contour_count=0

    for j,con in enumerate(c):

        # cv2.drawContours(resize_imge,c,j,(50 ,105,255),2)

        x, y, w, h = cv2.boundingRect(con)
        contour_count += 1

        cv2.rectangle(resize_imge, (x, y), (x + w, y + h), (0, 0, 255), 2)

    cv2.imshow("con"+str(i),resize_imge)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
